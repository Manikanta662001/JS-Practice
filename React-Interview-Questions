1. What is ReactJS?
A.ReactJs is a open-source frontend Javasript library developed by facebook used for building user interfaces, especially for single page applications.It uses a 
  component-based architecture and a virtual DOM for fast updates.React allows us to create reusable UI components.React was created by Jordan Walke, a software engineer
  working for Facebook.
- Component-based: Breaks UI into reusable pieces.
- Declarative: You describe what UI should look like, and React handles rendering.
- Virtual DOM: Improves performance by minimizing direct DOM manipulations.
- Unidirectional data flow: Data flows from parent to child components.

Q. What are major features of react?
A. - uses virtual DOM.
   - Follows unidirectional or single way data flow or binding.
   - supports server side rendering.
   - Uses reusable UI Components.
   - uses JSX syntax.

Q. what are Props and State?
A. Props stands for properties.Props are inputs to a React component.They are used to pass data from a parent component to a child component.Props are read-only (immutable) 
inside the child component.
State is data that is managed inside a component.State can be changed over time. State is mutable.

Q. What is diffing and Reconciliation?.
A.Diffing is the process React uses to compare the Virtual DOM with the previous Virtual DOM to figure out what has changed.
Reconciliation is the overall process of Diffing plus updating real Dom effciently based on diffing results.
In simple words:
- Reconciliation = Compare (Diffing) + Update (DOM changes).

2. what is DOM, virtual DOM?
DOM:- The actual HTML structure in the browser.
A. Virtual DOM is a light weight copy of actual DOM. When state changes, React updates this Virtual DOM first and then compare with real DOM and updates it.

3. Controlled vs Uncontrolled Components
Controlled: Form data is managed by React state.
const [value, setValue] = useState('');
<input value={value} onChange={e => setValue(e.target.value)} />
Uncontrolled: Form data is handled by the DOM itself, accessed using ref.
const inputRef = useRef();
<input ref={inputRef} />

4. What are Hooks in ReactJS?
Hooks are functions that allows you use state and other React features in functional components.
Common hooks:
- useState ‚Üí Manage state.
- useEffect ‚Üí Handle side effects (API calls, event listeners).
- useMemo ‚Üí Memoize computed values.
- useCallback ‚Üí Memoize functions.
- useRef ‚Üí Access DOM elements or store mutable values.
- useContext ‚Üí Access context values.

5. What is JSX, Babel, Webpack?
JSX: JSX stands for JavaScript XML ‚Äî JSX is syntax extension for JavaScript. JSX allows writing HTML-like syntax directly within JavaScript files. With JSX you can write expressions
inside curly braces { }.
const myElement = <h1>React is {5 + 5} times better with JSX</h1>;
Babel: JavaScript compiler that converts JSX and modern ES6+ code to browser-compatible JavaScript.
Webpack: Module bundler that packages JS, CSS, images, etc., into optimized files for the browser.

6. What is Redux?
A Redux is a Centralized predictable state management library for JavaScript applications.It helps manage the global state of an application in a predictable way.
Components can read data using selectors and update it by dispatching actions, which reducers handle to return a new state. This makes large applications easier
to debug and maintain.
- store holds the entire applications state.
- State can only be changed via actions processed by reducers.
- Supports middleware for async tasks.
üîπ Redux Flow (Data Cycle)
- UI dispatches an action (e.g., user clicks ‚ÄúAdd Part‚Äù).
- Reducer handles the action and returns a new state.
- Store updates with the new state.
- UI re-renders automatically with updated data.

7. What is Reducer, Action, Store in Redux?
Action: A Plain JS Object describing what happened.
{ type: 'INCREMENT', payload: 1 }
Reducer: Pure function that takes current state + action, returns new state.
Store: Single source of truth that holds the entire application state.

8. What is Redux-Thunk?
A middleware for redux that allows you to return functions from actions instead of plain objects, enabling async operations like API calls.

Q. What is Redux-Saga?
A.Redux-Saga is a middleware library for Redux used to handle asynchronous side effects like API calls.Redux-Saga uses ES6 Generators (function*) to manage async code in a more
structured and testable way.

9.what are keys in reactjs
a.Keys in React are unique identifiers for elements in a list. Keys allows React to efficiently update and re-render only the changed items.

10.Debouncing and Throttling
A.Debouncing delays the execution of a function until a certain amount of time has passed since the last time it was called.
If the event is triggered again before the delay finishes, the timer resets.
Use case in React:
- Search input (API call only after user stops typing).
- Window resize handling.
- Form validation on pause.

Throttling ensures a function is only executed once in a specific time interval, no matter how many times the event is triggered.
Use case in React:
- Infinite scroll (load more items only once every X ms).
- Scroll animations.
- Resizing window updates.

Q. What are HOCs?
A. HOC is a function that takes a component as input and returns a new component with additional props, logic, or behavior.It‚Äôs mainly used to reuse logic across multiple
components without duplicating code.
